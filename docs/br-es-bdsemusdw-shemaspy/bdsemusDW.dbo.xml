<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<database name="bdsemusDW" schema="dbo" type="Microsoft SQL Server - 14.00.3356">
   <tables>
      <table catalog="bdsemusDW" name="RBE_IndicadorExameCitoPatologico" numRows="98032" remarks="" schema="dbo" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="PEP" nullable="false" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="CNESOrigem" nullable="true" remarks="" size="20" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="IdTempo" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="IdadeNoExame" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="Diagnostico" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
      </table>
      <table catalog="bdsemusDW" name="RBE_IndicadorPrenatal" numRows="13825" remarks="" schema="dbo" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="PEP" nullable="false" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="CNESOrigem" nullable="true" remarks="" size="20" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="IdTempo" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="IdadeGestacionalCadastro" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="QuantidadeAcompanhamentos" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="RealizouExameHIV" nullable="true" remarks="" size="3" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="RealizouExameVDRL" nullable="true" remarks="" size="3" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="GravidezDeRisco" nullable="true" remarks="" size="3" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="AtendimentoOdontologicoDurantePreNatal" nullable="true" remarks="" size="3" type="char" typeCode="1"/>
      </table>
      <table catalog="bdsemusDW" name="RBE_Populacao" numRows="6942936" remarks="" schema="dbo" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="IdTempo" nullable="false" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="CNES" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="Sexo" nullable="true" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="IdadeEmMeses" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="IdadeEmAnos" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="Familia" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="Qtd" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="Paciente" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
      </table>
      <table catalog="bdsemusDW" name="RBE_TEMPO" numRows="24106" remarks="" schema="dbo" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="IDTEMPO" nullable="false" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="DATA" nullable="false" remarks="" size="6" type="date" typeCode="91"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="ANO" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="MES" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="DIA" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="5" name="DIA_SEMANA" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="6" name="DIA_ANO" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="7" name="ANO_BISSEXTO" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="8" name="DIA_UTIL" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="9" name="FIM_SEMANA" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="10" name="FERIADO" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="11" name="PRE_FERIADO" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="12" name="POS_FERIADO" nullable="false" remarks="" size="1" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="13" name="NOME_FERIADO" nullable="true" remarks="" size="30" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="14" name="NOME_DIA_SEMANA" nullable="false" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="15" name="NOME_DIA_SEMANA_ABREV" nullable="false" remarks="" size="3" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="16" name="NOME_MES" nullable="false" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="17" name="NOME_MES_ABREV" nullable="false" remarks="" size="3" type="char" typeCode="1"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="18" name="QUINZENA" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="19" name="BIMESTRE" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="20" name="TRIMESTRE" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="21" name="QUADRIMESTRE" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="22" name="SEMESTRE" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="23" name="NR_SEMANA_MES" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="24" name="NR_SEMANA_ANO" nullable="false" remarks="" size="2" type="smallint" typeCode="5"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="25" name="ESTACAO_ANO" nullable="false" remarks="" size="15" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="26" name="DATA_POR_EXTENSO" nullable="false" remarks="" size="50" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="27" name="EVENTO" nullable="true" remarks="" size="50" type="varchar" typeCode="12"/>
      </table>
      <table catalog="bdsemusDW" name="sysdiagrams" numRows="0" remarks="" schema="dbo" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="name" nullable="false" remarks="" size="256" type="sysname" typeCode="-9"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="principal_id" nullable="false" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="true" defaultValue="null" digits="0" id="2" name="diagram_id" nullable="false" remarks="" size="4" type="int identity" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="3" name="version" nullable="true" remarks="" size="4" type="int" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="4" name="definition" nullable="true" remarks="" size="2147483647" type="varbinary" typeCode="-3"/>
         <primaryKey column="diagram_id" sequenceNumberInPK="1"/>
         <index name="PK__sysdiagr__C2B05B612E6F2650" unique="true">
            <column ascending="true" name="diagram_id"/>
         </index>
         <index name="UK_principal_name" unique="true">
            <column ascending="true" name="principal_id"/>
            <column ascending="true" name="name"/>
         </index>
      </table>
   </tables>
   <routines>
      <routine dataAccess="READS" deterministic="false" name="fn_diagramobjects" returnType="int" type="FUNCTION">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE FUNCTION dbo.fn_diagramobjects() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_alterdiagram" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
	
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
	
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end

		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;

		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;

		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;

		return 0
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_creatediagram" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
	
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
	
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		
		select @retval = @@IDENTITY 
		return @retval
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_dropdiagram" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
	
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
	
		return 0;
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_helpdiagramdefinition" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on

		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
	
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
	
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end

		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_helpdiagrams" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_renamediagram" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
	
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
	
		select @u_name = USER_NAME(@owner_id)
	
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
	
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
	
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
	
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
	
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="sp_upgraddiagrams" type="PROCEDURE">
         <comment/>
         <definition language="SQL">
            <![CDATA[
	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
	
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
	
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);


		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/

		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
				
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END
	]]>
         </definition>
      </routine>
      <routine dataAccess="READS" deterministic="false" name="udf_PatientsByAppointments" returnType="TABLE" type="FUNCTION">
         <comment/>
         <definition language="SQL">
            <![CDATA[CREATE FUNCTION dbo.udf_PatientsByAppointments (
    @serviceType NVARCHAR
    ,@quantity_lowest SMALLINT = 0
    ,@quantity_higher SMALLINT = 32767
)
RETURNS TABLE
AS
RETURN
    SELECT 
        DISTINCT(PEP) AS identifier
    FROM
		bdsemusDW.dbo.RBE_IndicadorPrenatal
    WHERE
		QuantidadeAcompanhamentos BETWEEN @quantity_lowest AND @quantity_higher
]]>
         </definition>
      </routine>
      <routine dataAccess="READS" deterministic="false" name="udf_PatientsByFirstAntenatalAppointment" returnType="TABLE" type="FUNCTION">
         <comment/>
         <definition language="SQL">
            <![CDATA[CREATE FUNCTION dbo.udf_PatientsByFirstAntenatalAppointment (
    @gestationalAge_lowest INT
    ,@gestationalAge_higher INT
)
RETURNS TABLE
AS
RETURN
    SELECT 
        DISTINCT(PEP) AS identifier
    FROM
		bdsemusDW.dbo.RBE_IndicadorPrenatal
    WHERE
		QuantidadeAcompanhamentos BETWEEN @gestationalAge_lowest AND @gestationalAge_higher]]>
         </definition>
      </routine>
      <routine dataAccess="READS" deterministic="false" name="udf_PatientsByGestationalTime" returnType="TABLE" type="FUNCTION">
         <comment/>
         <definition language="SQL">
            <![CDATA[CREATE FUNCTION dbo.udf_PatientsByGestationalTime (
    @weeks_lowest INT
    ,@weeks_higher INT
)
RETURNS TABLE
AS
RETURN
    SELECT 
        DISTINCT(PEP) AS identifier
    FROM
		bdsemusDW.dbo.RBE_IndicadorPrenatal
    WHERE
		IdadeGestacionalCadastro BETWEEN @weeks_lowest AND @weeks_higher
]]>
         </definition>
      </routine>
   </routines>
</database>
